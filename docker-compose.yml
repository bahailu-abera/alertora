services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/init.sh:/init.sh
    command: /bin/sh -c "sleep 15 && sh /init.sh"
    environment:
      - DOMAIN=${DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - notification-service
      - user-preference-service
    networks:
      - alertora-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot-init.sh:/certbot-init.sh
    entrypoint: ["/bin/sh", "/certbot-init.sh"]
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
    depends_on:
      - nginx
    networks:
      - alertora-network

  notification-service:
    build:
      context: ./services/notification-service
    container_name: notification-service
    depends_on:
      - redis
      - mongodb
      - kafka
    environment:
      - FLASK_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongodb:27017
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "5000:5000"
    networks:
      - alertora-network

  user-preference-service:
    build:
      context: ./services/user-preference-service
    container_name: user-preference-service
    depends_on:
      - redis
      - mongodb
    environment:
      - FLASK_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongodb:27017
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8001:8001"
    networks:
      - alertora-network

  # ---------- WORKERS ----------
  email-worker:
    build:
      context: ./services/workers-service
    command: ["sh", "-c", "sleep 15 && python run.py email"]
    depends_on:
      - kafka
      - postgres
    environment:
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - GMAIL_ADDRESS=${GMAIL_ADDRESS}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - alertora-network

  sms-worker:
    build:
      context: ./services/workers-service
    command: ["sh", "-c", "sleep 15 && python run.py sms"]
    depends_on:
      - kafka
      - postgres
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - alertora-network

  push-android-worker:
    build:
      context: ./services/workers-service
    command: ["sh", "-c", "sleep 15 && python run.py push_android"]
    depends_on:
      - kafka
      - postgres
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - alertora-network

  push-ios-worker:
    build:
      context: ./services/workers-service
    command: ["sh", "-c", "sleep 15 && python run.py push_ios"]
    depends_on:
      - kafka
      - postgres
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - alertora-network

  # ---------- CELERY RETRY WORKER ----------
  retry-worker:
    build:
      context: ./services/workers-service
    command: ["celery", "--app", "app.celery_app", "worker", "--loglevel=info", "--concurrency=1"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MAX_RETRIES=3
    networks:
      - alertora-network
    depends_on:
      - redis
      - postgres

  celery-beat:
    build:
      context: ./services/workers-service
    command: ["celery", "--app", "app.celery_app", "beat", "--loglevel=info"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MAX_RETRIES=3
    depends_on:
      - redis
      - retry-worker
    networks:
      - alertora-network


  # ---------- REDIS ----------
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - alertora-network

  # ---------- POSTGRES ----------
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: alertora
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - alertora-network

  # ---------- MONGODB ----------
  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - alertora-network

  # ---------- KAFKA ----------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - alertora-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - alertora-network

volumes:
  mongo_data:
  zookeeper_data:
  kafka_data:
  pg_data:

networks:
  alertora-network:
    driver: bridge
